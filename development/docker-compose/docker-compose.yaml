# https://docs.docker.com/compose/compose-file/
version: "3.5"
x-common-variables: &common-variables
  JAVA_TOOL_OPTIONS: -XX:MaxRAMPercentage=60.0 -Dlogging.level.com.backbase=DEBUG
  SIG_SECRET_KEY: JWTSecretKeyDontUseInProduction!
  USERCTX_KEY: JWTSecretKeyDontUseInProduction!
  eureka.client.serviceUrl.defaultZone: http://registry:8080/eureka
  eureka.client.healthcheck.enabled: true
  eureka.instance.non-secure-port: 8080
  eureka.instance.initialStatus: STARTING
  management.endpoints.web.exposure.include: '*'
  management.endpoints.enabled-by-default: true
  management.security.roles: ANONYMOUS,ACTUATOR,USER
  spring.main.banner-mode: off
  spring.zipkin.enabled: false
  spring.cloud.config.enabled: false
  spring.cloud.kubernetes.enabled: false
  backbase.audit.enabled: false
  backbase.security.public.paths: /integration-api/**
  backbase.security.mtls.enabled: false

x-database-variables: &database-variables
  logging.level.liquibase: INFO
  spring.liquibase.enabled: true
  spring.datasource.username: root
  spring.datasource.password: root
  spring.datasource.driver-class-name: com.mysql.cj.jdbc.Driver
  spring.jpa.properties.hibernate.dialect: org.hibernate.dialect.MySQL8Dialect

x-message-broker-variables: &message-broker-variables
  spring.activemq.broker-url: tcp://activemq:61616
  spring.activemq.user: admin
  spring.activemq.password: admin

x-healthcheck-defaults: &healthcheck-defaults
  start_period: 60s
  interval: 15s
  timeout: 5s
  retries: 15

#config service properties
x-access-control: &access-control
  backbase.audit.enabled: true
  backbase.approval.validation.enabled: false
  backbase.communication.http.client.blacklisted-headers: "x-xsrf-token"

x-audit-service: &audit-service
  spring.cache.caffeine.spec: expireAfterWrite=10s

x-contentservices: &contentservices
  contentservices.filesystem.import-location: ~/pmkha/backbase/contentservices/import
  contentservices.filesystem.export-location: ~/pmkha/backbase/contentservices/export
  contentservices.extension-points.enabled: true
  contentservices.auditing.enabled: true
  contentserviecs.provisioning.enabled: true

x-provisioning: &provisioning
  spring.datasource.tomcat.min-idle: 1
  spring.datasource.tomcat.max-active: 2
  spring.datasource.tomcat.test-while-idle: 2
  spring.datasource.tomcat.time-between-eviction-runs-millis: 3600000
  spring.datasource.tomcat.validation-query: SELECT 1
  spring.datasource.hikari.pool-name: provisioning
  spring.datasource.hikari.minimum-idle: 1
  spring.datasource.hikari.maximum-pool-size: 2
  spring.datasource.hikari.connection-test-query: SELECT 1

x-device-management-service: &device-management-service
  sso.jwt.internal.type: signed
  sso.jwt.internal.signature.key.type: ENV
  sso.jwt.internal.signature.key.value: SIG_SECRET_KEY

x-fido-service: &fido-service
  sso.jwt.internal.type: signed
  sso.jwt.internal.signature.key.type: ENV
  sso.jwt.internal.signature.key.value: SIG_SECRET_KEY

x-mobile-authentication: &mobile-authentication
  sso.jwt.internal.type: signed
  sso.jwt.internal.signature.key.type: ENV
  sso.jwt.internal.signature.key.value: SIG_SECRET_KEY

x-web-authentication: &web-authentication
  sso.jwt.internal.type: signed
  sso.jwt.internal.signature.key.type: ENV
  sso.jwt.internal.signature.key.value: SIG_SECRET_KEY

x-approval-service: &approval-service
  backbase.approvals.assignment.approval.enabled: true

x-limit: &limit
  backbase.audit.enabled: true
  backbase.limits.integration.retry.delay-in-millis: 100
  backbase.limits.integration.retry.enabled: true
  backbase.limits.task-executor.allow-core-thread-time-out: true
  backbase.limits.task-executor.core-pool-size: 40
  backbase.limits.task-executor.keep-alive-seconds: 50
  backbase.limits.task-executor.max-pool-size: 2048
  backbase.limits.task-executor.queue-capacity: 16
  backbase.limits.xccy.enabled: true
  cache.evict.entitlements.legal-entities.evict-cron: 0 0/30 * * * ?

x-transaction-manager: &transaction-manager
  backbase.transaction.enrichment.enabled: true

x-transaction-enricher: &transaction-enricher
  backbase.transaction.enrichment.enrich-product-types: savings-account,current-account,checking-account,credit-card

x-confirmation: &confirmation
  backbase.confirmation.maximum-callback-attempts: 4

x-arrangement-manager: &arrangement-manager
  backbase.security.mtls.enabled: false

x-user-manager: &user-manager
  backbase.users.identity-endpoints-enabled: true
  backbase.users.identity-integration-enabled: true
  backbase.users.sync-primary-to-identity-enabled: true
  spring.cloud.discovery.client.simple.instances.user-integration-outbound-service[0].uri: http://wiremock:8080

x-payment-order-service: &payment-order-service
  backbase.communication.services.dbs.integration.external.outbound.paymentorder.service-id: payment-order-core-mock-service

x-payment-order-options: &payment-order-options
  spring.config.use-legacy-processing: true

x-user-profile-core-mock: &user-profile-core-mock
  scim.server-config.authentication-schemes:
  scim.resource-types.user.name: User
  scim.resource-types.user.endpoint: /Users
  scim.resource-types.user.schema: "urn:ietf:params:scim:schemas:core:2.0:User"
  scim.resource-types.user.schemaExtensions:
  backbase.security.public.paths: /**

#end config

volumes:
  backbase_mysql_data:
    driver: local

networks:
  default:
    name: backbase_default

services:
  mysql:
    container_name: mysql
    image: mysql:8.0.31
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
    volumes:
      - backbase_mysql_data:/var/lib/mysql
    healthcheck:
      test: mysqladmin ping --silent
      interval: 10s
      timeout: 5s
      retries: 5

  activemq:
    container_name: activemq
    image: symptoma/activemq:5.17.3
    privileged: true
    ports:
      - "61616:61616"
      - "8161:8161"
    healthcheck:
      test: /opt/activemq/bin/activemq query --objname type=Broker,brokerName=*,service=Health | grep Good
      interval: 10s
      timeout: 5s
      retries: 5

  registry:
    container_name: registry
    image: repo.backbase.com/backbase-docker-releases/registry:${BB_VERSION}
    ports:
      - "8761:8080"
    volumes:
      - ./scripts/HealthCheck.java:/tmp/HealthCheck.java
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/HealthCheck.java" ]

  edge:
    container_name: edge
    image: repo.backbase.com/backbase-docker-releases/edge:${BB_VERSION}
    ports:
      - "8280:8080"
    environment:
      <<: *common-variables
      gateway.actuator.security.enabled: true
      gateway.csrf.enabled: true
    volumes:
      - ./scripts/HealthCheck.java:/tmp/HealthCheck.java
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/HealthCheck.java", "http://registry:8080/eureka/apps/edge", "<status>UP</status>" ]
    links:
      - registry
      - token-converter

  token-converter:
    container_name: token_converter
    image: repo.backbase.com/backbase-docker-releases/oidc-token-converter-service:${BB_VERSION}
    ports:
      - "7779:8080"
    environment:
      <<: *common-variables
      backbase.oidc-token-converter.whitelistedDomains[0].internalHostScheme: http
      backbase.oidc-token-converter.whitelistedDomains[0].internalHost: backbase-identity:8080
      backbase.oidc-token-converter.whitelistedDomains[0].issuerHost: localhost
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/token-converter", "<status>UP</status>" ]
    links:
      - registry
      - backbase-identity

  backbase-identity:
    container_name: backbase_identity
    image: repo.backbase.com/backbase-docker-releases/backbase-identity:${BB_VERSION}
    ports:
      - '8180:8080'
      - '10090:10090'
    environment:
      QUARKUS_DATASOURCE_URL: "jdbc:mysql://mysql:3306/backbase_identity?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true"
      QUARKUS_DATASOURCE_USERNAME: "root"
      QUARKUS_DATASOURCE_PASSWORD: "root"
      QUARKUS_DATASOURCE_DRIVER: "com.mysql.cj.jdbc.Driver"
      QUARKUS_LOG_FILE_ENABLE: "false"
      KEYCLOAK_ADMIN: "admin"
      KEYCLOAK_ADMIN_PASSWORD: "admin"
      KEYCLOAK_HOME_DIR: "/"
      KEYCLOAK_CONNECTIONSJPA_QUARKUS_INITIALIZEEMPTY: "true"
      KEYCLOAK_CONNECTIONSJPA_QUARKUS_MIGRATIONSTRATEGY: "update"
      KEYCLOAK_BACKBASE_OIDC_TOKEN_CONVERTER_URL: "http://token-converter:8080"
      keycloak.hostname.default.frontendUrl: "http://10.162.86.210:8180/auth"
      KEYCLOAK_BACKBASE_EVENT_LISTENERS_AUDIT_INTEGRATIONSERVICEURL: "http://audit-service:8080"
      KEYCLOAK_BACKBASE_DEVICE_URL: "http://device-management-service:8080"
      KEYCLOAK_BACKBASE_FIDO_URL: "http://fido-service:8080"
      KEYCLOAK_BACKBASE_MOBILE_AUTHENTICATION_URL: "http://mobile-authentication:8080"
      KC_SPI_CONFIRMATION_SERVICE_CLIENT_DEFAULT_URL: "http://confirmation:8080"
      KC_SPI_WEB_AUTHENTICATION_SERVICE_CLIENT_DEFAULT_URL: "http://web-authentication:8080"
      KEYCLOAK.BACKBASE.CONFIRMATION.URL: "http://confirmation:8080"
      KEYCLOAK.BACKBASE.COMMUNICATION.URL: "http://communication:8080"
      JAVA_TOOL_OPTIONS: "-Dkeycloak.migration.strategy=IGNORE_EXISTING -Dkeycloak.migration.action=import -Dkeycloak.profile.feature.upload_scripts=enabled -Dquarkus.log.category.'\"com.backbase\"'.level=DEBUG"
      QUARKUS_HTTP_CORS: "true"
      QUARKUS_HTTP_CORS_EXPOSED_HEADERS: Location
      QUARKUS_HTTP_CORS_ORIGINS: http://localhost:9191,http://localhost:7777
      QUARKUS_HTTP_CORS_METHODS: GET,POST,OPTIONS
    volumes:
      - ./backbase-identity/themes:/themes
      - ./backbase-identity/providers:/providers
      - ./backbase-identity/json:/tmp/keycloak-export
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://10.162.86.210:8080/auth/realms/backbase/.well-known/openid-configuration", "backbase" ]
    depends_on:
      mysql:
        condition: service_healthy

  access-control:
    container_name: access_control
    image: repo.backbase.com/backbase-docker-releases/access-control:${BB_VERSION}
    ports:
      - "8040:8080"
    environment:
      <<: [*common-variables, *message-broker-variables, *database-variables, *access-control]
      spring.datasource.url: jdbc:mysql://mysql:3306/access-control?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/access-control", "<status>UP</status>" ]
    depends_on:
      mysql:
        condition: service_healthy
    links:
      - activemq
      - registry
      - audit-service
      - user-manager
      - limit
      - arrangement-manager
      - approval-service

  arrangement-manager:
    container_name: arrangement_manager
    image: repo.backbase.com/backbase-docker-releases/arrangement-manager:${BB_VERSION}
    ports:
      - "8050:8080"
    environment:
      <<: [*common-variables, *message-broker-variables, *database-variables, *arrangement-manager]
      spring.datasource.url: jdbc:mysql://mysql:3306/arrangement-manager?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/arrangement-manager", "<status>UP</status>" ]
    depends_on:
      mysql:
        condition: service_healthy
    links:
      - activemq
      - registry

  user-manager:
    container_name: user_manager
    image: repo.backbase.com/backbase-docker-releases/user-manager:${BB_VERSION}
    ports:
      - "8060:8080"
    environment:
      <<: [*common-variables, *message-broker-variables, *database-variables, *user-manager]
      spring.datasource.url: jdbc:mysql://mysql:3306/user-manager?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/user-manager", "<status>UP</status>" ]
    depends_on:
      mysql:
        condition: service_healthy
    links:
      - activemq
      - registry

  identity-integration-service:
    container_name: identity_integration_service
    image: repo.backbase.com/backbase-docker-releases/identity-integration-service:${BB_VERSION}
    ports:
      - "8070:8080"
    environment:
      <<: *common-variables
      identity.serverUrl: http://backbase-identity:8080/auth
      identity.masterAdmin.username: admin
      identity.masterAdmin.password: admin
      identity.realmConfiguration.fallbackOptions.enableUser: true
      identity.realmConfiguration.fallbackOptions.useTemporaryPassword: true
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/identity-integration-service", "<status>UP</status>" ]
    links:
      - registry
      - backbase-identity

  product-catalog-task:
    container_name: product_catalog_task
    image: repo.backbase.com/backbase-stream-images/product-catalog-task:${STREAM_VERSION}
    profiles:
      - bootstrap
    environment:
      <<: *common-variables
      spring.config.additional-location: file:/tmp/ingestion.yml
    volumes:
      - ../config/stream/ingestion.yml:/tmp/ingestion.yml
    depends_on:
      token-converter:
        condition: service_healthy
      arrangement-manager:
        condition: service_healthy

  legal-entity-bootstrap-task:
    container_name: legal_entity_bootstrap_task
    image: repo.backbase.com/backbase-stream-images/legal-entity-bootstrap-task:${STREAM_VERSION}
    profiles:
      - bootstrap
    environment:
      <<: *common-variables
      spring.config.additional-location: file:/tmp/ingestion.yml
    volumes:
      - ../config/stream/ingestion.yml:/tmp/ingestion.yml
    depends_on:
      token-converter:
        condition: service_healthy
      access-control:
        condition: service_healthy
      arrangement-manager:
        condition: service_healthy
      user-manager:
        condition: service_healthy
      identity-integration-service:
        condition: service_healthy
      backbase-identity:
        condition: service_healthy
      product-catalog-task:
        condition: service_completed_successfully

  wiremock:
    container_name: wiremock
    image: wiremock/wiremock:2.32.0
    profiles:
      - with-mocks
    command:
      - --global-response-templating
      - --verbose
    volumes:
      - ./stubs:/home/wiremock

  postman-health-check:
    container_name: health_checks
    image: postman/newman
    platform: linux/amd64
    command:
      run /etc/newman/postman_collection.json --environment="/etc/newman/postman_environment.json"
    volumes:
      -  ../../test/postman/HealthCheck_Local-Backend-Environment.postman_collection.json:/etc/newman/postman_collection.json
      -  ../../test/postman/Docker-Backend-Environment.postman_environment.json:/etc/newman/postman_environment.json
    depends_on:
      access-control:
        condition: service_healthy
      arrangement-manager:
        condition: service_healthy
      backbase-identity:
        condition: service_healthy
      identity-integration-service:
        condition: service_healthy
      token-converter:
        condition: service_healthy
      user-manager:
        condition: service_healthy

  audit-service:
    container_name: audit_service
    image: repo.backbase.com/backbase-docker-releases/audit-service:${BB_VERSION}
    ports:
      - "8090:8080"
    environment:
      <<: *common-variables
      <<: *message-broker-variables
      <<: *database-variables
      <<: *audit-service
      spring.datasource.url: jdbc:mysql://mysql:3306/audit-service?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/audit-service", "<status>UP</status>" ]
    depends_on:
      mysql:
        condition: service_healthy
    links:
      - registry

  contentservices:
    container_name: contentservices
    image: repo.backbase.com/backbase-docker-releases/contentservices:${BB_VERSION}
    ports:
      - "8091:8080"
    environment:
      <<: [*common-variables, *message-broker-variables, *database-variables, *contentservices]
      spring.datasource.url: jdbc:mysql://mysql:3306/contentservices?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/contentservices", "<status>UP</status>" ]
    depends_on:
      mysql:
        condition: service_healthy
    links:
      - registry
      - audit-service
      - provisioning

  provisioning:
    container_name: provisioning
    image: repo.backbase.com/backbase-docker-releases/provisioning:${BB_VERSION}
    ports:
      - "8092:8080"
    environment:
      <<: *common-variables
      <<: *message-broker-variables
      <<: *database-variables
      <<: *provisioning
      spring.datasource.url: jdbc:mysql://mysql:3306/provisioning?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/provisioning", "<status>UP</status>" ]
    depends_on:
      mysql:
        condition: service_healthy
    links:
      - registry

  device-management-service:
    container_name: device_management_service
    image: repo.backbase.com/backbase-docker-releases/device-management-service:${BB_VERSION}
    ports:
      - "8190:8080"
    environment:
      <<: *common-variables
      <<: *message-broker-variables
      <<: *database-variables
      <<: *device-management-service
      spring.datasource.url: jdbc:mysql://mysql:3306/device-management-service?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/device-management-service", "<status>UP</status>" ]
    depends_on:
      mysql:
        condition: service_healthy
    links:
      - registry
      - access-control
      - audit-service
      - user-manager

  fido-service:
    container_name: fido_service
    image: repo.backbase.com/backbase-docker-releases/fido-service:${BB_VERSION}
    ports:
      - "8191:8080"
    environment:
      <<: *common-variables
      <<: *message-broker-variables
      <<: *database-variables
      <<: *fido-service
      spring.datasource.url: jdbc:mysql://mysql:3306/fido-service?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/fido-service", "<status>UP</status>" ]
    depends_on:
      mysql:
        condition: service_healthy
    links:
      - registry

  mobile-authentication:
    container_name: mobile_authentication
    image: repo.backbase.com/backbase-docker-releases/mobile-authentication:${BB_VERSION}
    ports:
      - "8192:8080"
    environment:
      <<: *common-variables
      <<: *message-broker-variables
      <<: *mobile-authentication
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/mobile-authentication", "<status>UP</status>" ]
    links:
      - registry

  communication:
    container_name: communication
    image: repo.backbase.com/backbase-docker-releases/communication:${BB_VERSION}
    ports:
      - "8550:8080"
    environment:
      <<: *common-variables
      <<: *message-broker-variables
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/communication", "<status>UP</status>" ]
    links:
      - registry

  web-authentication:
    container_name: web_authentication
    image: repo.backbase.com/backbase-docker-releases/web-authentication:${BB_VERSION}
    ports:
      - "8194:8080"
    environment:
      <<: *common-variables
      <<: *message-broker-variables
      <<: *database-variables
      <<: *web-authentication
      spring.datasource.url: jdbc:mysql://mysql:3306/web-authentication?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/web-authentication", "<status>UP</status>" ]
    depends_on:
      mysql:
        condition: service_healthy
    links:
      - registry
      - user-manager
      - device-management-service
      - fido-service
      - contentservices
      - communication

  account-statement:
    container_name: account_statement
    image: repo.backbase.com/backbase-docker-releases/account-statement:${BB_VERSION}
    ports:
      - "8390:8080"
    environment:
      <<: *common-variables
      <<: *message-broker-variables
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/account-statement", "<status>UP</status>" ]
    links:
      - registry
      - account-statement-integration-mock

  account-statement-integration-mock:
    container_name: account_statement_integration_mock
    image: repo.backbase.com/backbase-docker-releases/account-statement-integration-mock:${BB_VERSION}
    ports:
      - "8391:8080"
    environment:
      <<: *common-variables
      <<: *database-variables
      spring.datasource.url: jdbc:mysql://mysql:3306/account-statement-integration-mock?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true

    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/account-statement-integration-mock", "<status>UP</status>" ]
    links:
      - registry
      - account-mock

  approval-service:
    container_name: approval_service
    image: repo.backbase.com/backbase-docker-releases/approval-service:${BB_VERSION}
    ports:
      - "8197:8080"
    environment:
      <<: *common-variables
      <<: *message-broker-variables
      <<: *database-variables
      <<: *approval-service
      spring.datasource.url: jdbc:mysql://mysql:3306/approval-service?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/approval-service", "<status>UP</status>" ]
    depends_on:
      mysql:
        condition: service_healthy
    links:
      - registry

  limit:
    container_name: limit
    image: repo.backbase.com/backbase-docker-releases/limit:${BB_VERSION}
    ports:
      - "8196:8080"
    environment:
      <<: *common-variables
      <<: *message-broker-variables
      <<: *database-variables
      <<: *limit
      spring.datasource.url: jdbc:mysql://mysql:3306/limit?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/limit", "<status>UP</status>" ]
    depends_on:
      mysql:
        condition: service_healthy
    links:
      - registry
      - audit-service
      - approval-service

  account-mock:
    container_name: account_mock
    image: repo.backbase.com/backbase-docker-releases/account-mock:${BB_VERSION}
    ports:
      - "8594:8080"
    environment:
      <<: *common-variables
      <<: *database-variables
      spring.datasource.url: jdbc:mysql://mysql:3306/account-mock?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/account-mock", "<status>UP</status>" ]
    depends_on:
      mysql:
        condition: service_healthy
    links:
      - registry

  transaction-manager:
    container_name: transaction_manager
    image: repo.backbase.com/backbase-docker-releases/transaction-manager:${BB_VERSION}
    ports:
      - "8331:8080"
    environment:
      <<: *common-variables
      <<: *message-broker-variables
      <<: *database-variables
      <<: *transaction-manager
      spring.datasource.url: jdbc:mysql://mysql:3306/transaction-manager?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/transaction-manager", "<status>UP</status>" ]
    depends_on:
      mysql:
        condition: service_healthy
    links:
      - registry
      - transaction-integration-mock

  transaction-enricher:
    container_name: transaction_enricher
    image: repo.backbase.com/backbase-docker-releases/transaction-enricher:${BB_VERSION}
    ports:
      - "8324:8080"
    environment:
      <<: *common-variables
      <<: *message-broker-variables
      <<: *database-variables
      <<: *transaction-enricher
      spring.datasource.url: jdbc:mysql://mysql:3306/transaction-enricher?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/transaction-enricher", "<status>UP</status>" ]
    depends_on:
      mysql:
        condition: service_healthy
    links:
      - registry

  transaction-integration-service:
    container_name: transaction_integration_service
    image: repo.backbase.com/backbase-docker-releases/transaction-integration-service:1.50
    ports:
      - "8320:8080"
    environment:
      <<: *common-variables
      <<: *message-broker-variables
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/transaction-integration-service", "<status>UP</status>" ]
    links:
      - registry

  transaction-integration-mock:
    container_name: transaction_integration_mock
    image: repo.backbase.com/backbase-docker-releases/transaction-integration-mock:1.50
    ports:
      - "8323:8080"
    environment:
      <<: *common-variables
      <<: *message-broker-variables
      <<: *database-variables
      spring.datasource.url: jdbc:mysql://mysql:3306/transaction-integration-mock?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/transaction-integration-mock", "<status>UP</status>" ]
    depends_on:
      mysql:
        condition: service_healthy
    links:
      - registry

  confirmation:
    container_name: confirmation
    image: repo.backbase.com/backbase-docker-releases/confirmation:${BB_VERSION}
    ports:
      - "8123:8080"
    environment:
      <<: *common-variables
      <<: *message-broker-variables
      <<: *database-variables
      <<: *confirmation
      spring.datasource.url: jdbc:mysql://mysql:3306/confirmation?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/confirmation", "<status>UP</status>" ]
    depends_on:
      mysql:
        condition: service_healthy
    links:
      - registry

  user-profile-core-mock:
    container_name: user_profile_core_mock
    image: repo.backbase.com/backbase-docker-releases/user-profile-core-mock:${BB_VERSION}
    ports:
      - "8321:8080"
    environment:
      <<: *common-variables
      <<: *message-broker-variables
      <<: *database-variables
      <<: *user-profile-core-mock
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/user-profile-core-mock", "<status>UP</status>" ]
    depends_on:
      mysql:
        condition: service_healthy
    links:
      - registry

  user-profile-manager:
    container_name: user_profile_manager
    image: repo.backbase.com/backbase-docker-releases/user-profile-manager:${BB_VERSION}
    ports:
      - "8322:8080"
    environment:
      <<: *common-variables
      <<: *message-broker-variables
      <<: *database-variables
      spring.datasource.url: jdbc:mysql://mysql:3306/user-profile-manager?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/user-profile-manager", "<status>UP</status>" ]
    depends_on:
      mysql:
        condition: service_healthy
    links:
      - registry

  user-integration-external-mock:
    container_name: user_integration_external_mock
    image: repo.backbase.com/backbase-docker-releases/user-integration-external-mock:${BB_VERSION}
    ports:
      - "8325:8080"
    environment:
      <<: *common-variables
      <<: *message-broker-variables
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/user-integration-external-mock", "<status>UP</status>" ]
    links:
      - registry

  legalentity-integration-service:
    container_name: legalentity_integration_service
    image: repo.backbase.com/backbase-docker-releases/legalentity-integration-service:${BB_VERSION}
    ports:
      - "8326:8080"
    environment:
      <<: *common-variables
      <<: *message-broker-variables
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/legalentity-integration-service", "<status>UP</status>" ]
    links:
      - registry

  legalentity-integration-external-mock:
    container_name: legalentity_integration_external_mock
    image: repo.backbase.com/backbase-docker-releases/legalentity-integration-external-mock:${BB_VERSION}
    ports:
      - "8327:8080"
    environment:
      <<: *common-variables
      <<: *message-broker-variables
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/legalentity-integration-external-mock", "<status>UP</status>" ]
    links:
      - registry

  accessgroup-integration-service:
    container_name: accessgroup_integration_service
    image: repo.backbase.com/backbase-docker-releases/accessgroup-integration-service:${BB_VERSION}
    ports:
      - "8328:8080"
    environment:
      <<: *common-variables
      <<: *message-broker-variables
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/accessgroup-integration-service", "<status>UP</status>" ]
    links:
      - registry

  payment-order-service:
    container_name: payment_order_service
    image: repo.backbase.com/backbase-docker-releases/payment-order-service:${BB_VERSION}
    ports:
      - "8397:8080"
    environment:
      <<: *common-variables
      <<: *message-broker-variables
      <<: *database-variables
      <<: *payment-order-service
      spring.datasource.url: jdbc:mysql://mysql:3306/payment-order-service?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/payment-order-service", "<status>UP</status>" ]
    depends_on:
      mysql:
        condition: service_healthy
    links:
      - registry
      - payment-order-core-mock-service

  payment-order-core-mock-service:
    container_name: payment_order_core_mock_service
    image: repo.backbase.com/backbase-docker-releases/payment-order-core-mock-service:${BB_VERSION}
    ports:
      - "8398:8080"
    environment:
      <<: *common-variables
      <<: *message-broker-variables
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/payment_order_core_mock_service", "<status>UP</status>" ]
    links:
      - registry

  payment-order-options:
    container_name: payment_order_options
    image: repo.backbase.com/backbase-docker-releases/payment-order-options:${BB_VERSION}
    ports:
      - "8315:8080"
    environment:
      <<: *common-variables
      <<: *message-broker-variables
      <<: *payment-order-options
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/payment-order-options", "<status>UP</status>" ]
    links:
      - registry

  # <EXAMPLE-SERVICE-NAME>:
  #   container_name: example_service
  #   image: <DOCKER-REGISTRY>/<REPOSITORY-NAME>:<TAG>
  #   ports:
  #     - "8090:8080"
  #   environment:
  #     <<: *common-variables
  #     eureka.client.enabled: 'true'
  #   volumes:
  #     - ./scripts:/tmp/h
  #   healthcheck:
  #     <<: *healthcheck-defaults
  #     test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/<EXAMPLE-SERVICE-NAME>", "<status>UP</status>" ]
  #   links:
  #     - registry
